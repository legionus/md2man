package main

import (
	"bytes"
	"testing"
	"text/template"
	"time"
)

type TestCase struct {
	input  string
	expect string
}

type TestCaseData struct {
	Date string
}

func runTestSet(t *testing.T, testCases map[string]TestCase) {
	date := time.Now().Format("2 January 2006")

	for name, testCase := range testCases {
		t.Run(name, func(tt *testing.T) {
			output := Render([]byte(testCase.input))

			tmpl, err := template.New("expected").Parse(testCase.expect)
			if err != nil {
				t.Fatal(err)
			}

			s := bytes.NewBuffer([]byte{})

			err = tmpl.Execute(s, TestCaseData{Date: date})
			if err != nil {
				t.Fatalf("execution failed: %s", err)
			}

			expect := s.Bytes()

			if !bytes.Equal(expect, output) {
				tt.Logf("Expected:\n")
				tt.Logf("%s\n", expect)
				tt.Logf("Output:\n")
				tt.Logf("%s\n", output)
				tt.Fail()
			}
		})
	}
}

func TestTitleSection(t *testing.T) {
	runTestSet(t, map[string]TestCase{
		"Title": {
			input: `
% foo bar 3
# aaa
`,
			expect: `.\" Man page was generated by md2man.
.TH "foo bar" 3 "{{.Date}}"
.SH "aaa"
`,
		},
		"TopLevel": {
			input: `
# aaa
# bbb
`,
			expect: `.\" Man page was generated by md2man.
.TH "aaa" 1 "{{.Date}}"
.SH "aaa"
.SH "bbb"
`,
		},
		"TopLevelAndSecondLevel": {
			input: `
# aaa
## bbb
`,
			expect: `.\" Man page was generated by md2man.
.TH "aaa" 1 "{{.Date}}"
.SH "aaa"
.SH "bbb"
`,
		},
		"Subsection": {
			input: `
# aaa
## bbb
### ccc
`,
			expect: `.\" Man page was generated by md2man.
.TH "aaa" 1 "{{.Date}}"
.SH "aaa"
.SH "bbb"
.SS "ccc"
`,
		},
	})
}

func TestParagraph(t *testing.T) {
	runTestSet(t, map[string]TestCase{
		"Simple": {
			input: `
# Test
Paragraph aaa

Paragraph bbb

Paragraph ccc
Paragraph ddd
`,
			expect: `.\" Man page was generated by md2man.
.TH "Test" 1 "{{.Date}}"
.SH "Test"
.PP
Paragraph aaa

.PP
Paragraph bbb

.PP
Paragraph ccc
.br
Paragraph ddd

`,
		},
	})
}

func TestTextFormat(t *testing.T) {
	runTestSet(t, map[string]TestCase{
		"Code": {
			input: `
# Test
Paragraph ` + "`" + "a a a" + "`" + `
`,
			expect: `.\" Man page was generated by md2man.
.TH "Test" 1 "{{.Date}}"
.SH "Test"
.PP
Paragraph \fIa a a\fP

`,
		},
		"Italic": {
			input: `
# Test
Paragraph _AAA_ _BBB_
`,
			expect: `.\" Man page was generated by md2man.
.TH "Test" 1 "{{.Date}}"
.SH "Test"
.PP
Paragraph \fIAAA\fP \fIBBB\fP

`,
		},
		"Strong": {
			input: `
# Test
Paragraph **AAA** **BBB**
`,
			expect: `.\" Man page was generated by md2man.
.TH "Test" 1 "{{.Date}}"
.SH "Test"
.PP
Paragraph \fBAAA\fP \fBBBB\fP

`,
		},
		"Combine": {
			input: `
# Test
_aaa **BBB** ccc_
`,
			expect: `.\" Man page was generated by md2man.
.TH "Test" 1 "{{.Date}}"
.SH "Test"
.PP
\fIaaa \fBBBB\fP ccc\fP

`,
		},
	})
}

func TestList(t *testing.T) {
	runTestSet(t, map[string]TestCase{
		"ListWithText": {
			input: `
# Test
List items:

* aaa
* bbb "B B B"
* ccc
`,
			expect: `.\" Man page was generated by md2man.
.TH "Test" 1 "{{.Date}}"
.SH "Test"
.PP
List items:

.IP
\(bu aaa
.PD 0
.IP
\(bu bbb \(dqB B B\(dq
.PD 0
.IP
\(bu ccc
.PD 0

`,
		},
	})
}
